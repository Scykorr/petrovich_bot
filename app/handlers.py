from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from app.keyboards import get_number, registration, help_categories
from main_info.token import passwd
from .states import Client

router = Router()
user_pass = passwd

@router.message(CommandStart())
async def get_message(message: types.Message, state: FSMContext):
    await message.reply('üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!\n'
                         '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n'
                        '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.')
    await state.set_state(Client.waiting_for_password)

@router.message(Client.waiting_for_password)
async def check_password(message: types.Message, state: FSMContext):
    if message.text == user_pass:
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n"
                            "–í–≤–µ–¥–∏—Ç–µ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        await state.set_state(Client.transaction_id)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(Client.transaction_id)
async def get_id(message: types.Message, state: FSMContext):
    if message.text == '–í—ã—Ö–æ–¥':
        await message.answer('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!üëã')
        await state.clear()
    else:
        id_for_api = message.text
        await message.reply(f"Deposit üì• Transaction üî•Processing\n\n"
                            f"Blowfish ID: 85a6979e-cf86-4777-9b7e-37f4748e3edb\n"
                            f"External ID: 456b6c26-192d-46ab-bab7-d47a12e28318\n\n"
                            f"Amount: 5 000 RUB\n"
                            f"Date: 10.02.2025\n"
                            f"Time (MSK): 11:21:07\n\n"
                            f"üíπProvider: pay4u\n\n"
                            f"üí±Trader:\n"
                            f"Name: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ö.\n"
                            f"Requisites: 1234 5678 0001 0000")
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
        await state.set_state(Client.transaction_id)

#
# @router.message(Client.exit_working)
# async def exit_work(message: types.Message, state: FSMContext):



# @router.message(F.text == '–í–≤–µ–¥–∏—Ç–µ id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
# async def register(message: types.Message, state: FSMContext):
#     await state.set_state(Client.surname)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é: ')
#
#
# @router.message(Client.surname)
# async def register_surname(message: types.Message, state: FSMContext):
#     await state.update_data(surname=message.text)
#     await state.set_state(Client.name)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è: ')
#
#
# @router.message(Client.name)
# async def register_name(message: types.Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await state.set_state(Client.parent_name)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –û—Ç—á–µ—Å—Ç–≤–æ: ')
#
#
# @router.message(Client.parent_name)
# async def register_parent_name(message: types.Message, state: FSMContext):
#     await state.update_data(parent_name=message.text)
#     await state.set_state(Client.birthday_date)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–æ–±—Ä–∞–∑–µ—Ü: 01.01.1991): ')
#
#
# @router.message(Client.birthday_date)
# async def register_birthday_date(message: types.Message, state: FSMContext):
#     await state.update_data(birthday_date=message.text)
#     await state.set_state(Client.phone_number)
#     await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', reply_markup=get_number)
#
#
# @router.message(Client.phone_number, F.contact)
# async def register_number(message: types.Message, state: FSMContext):
#     await state.update_data(phone_number=message.contact.phone_number)
#     await state.set_state(Client.help_category)
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ', reply_markup=help_categories)
#
#
# @router.message(Client.help_category)
# async def register_help_category(message: types.Message, state: FSMContext):
#     await state.update_data(help_category=message.text)
#     data = await state.get_data()
#     await message.answer(f'–í–∞—à–∞ –§–∞–º–∏–ª–∏—è: {data["surname"]}\n'
#                          f'–í–∞—à–µ –ò–º—è: {data["name"]}\n'
#                          f'–í–∞—à–µ –û—Ç—á–µ—Å—Ç–≤–æ: {data["parent_name"]}\n'
#                          f'–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["birthday_date"]}\n'
#                          f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone_number"]}\n'
#                          f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data["help_category"]}'
#                          )
#     await state.clear()
